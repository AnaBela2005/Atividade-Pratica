import pygame
import sys
import random

# Definir dimensões da janela
WIDTH = 288
HEIGHT = 512

# Definir cor de fundo
BACKGROUND_COLOR = (0, 255, 255)

# Definir velocidade do pássaro e da gravidade
BIRD_SPEED = 5
GRAVITY = 0.5

# Definir posição inicial do pássaro
bird_x = 50
bird_y = 200
# Definir tamanho do pássaro
BIRD_WIDTH = 34
BIRD_HEIGHT = 24

# Definir posição dos canos
PIPE_GAP = 100
PIPE_WIDTH = 52
PIPE_HEIGHT = 320
pipe_x = WIDTH
pipe_y = random.randint(100, HEIGHT - PIPE_GAP - 100)

# Definir tamanho da tela
screen = pygame.display.set_mode((WIDTH, HEIGHT))

# Carregar imagens do pássaro e do fundo
bird_image = pygame.image.load('assets/bird.png').convert_alpha()
background_image = pygame.image.load('assets/background.png').convert()

# Carregar imagem do cano
pipe_image = pygame.image.load('assets/pipe.png').convert_alpha()

# Definir fonte para pontuação
score_font = pygame.font.Font('assets/04B_19.ttf', 30)

# Definir variáveis de jogo
score = 0
game_over = False

 

# Função para reiniciar o jogo
def reset_game():
    global bird_y, pipe_x, pipe_y, score, game_over
    bird_y = 200
    pipe_x = WIDTH
    pipe_y = random.randint(100, HEIGHT - PIPE_GAP - 100)
    score = 0
    game_over = False

 

# Iniciar pygame
pygame.init()

 

# Definir loop principal do jogo
while True:

 

    # Verificar eventos de entrada
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

 

        # Detectar pressionamento de tecla para movimentar o pássaro
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                bird_y -= 50

 

            # Reiniciar jogo se pressionar R
            if event.key == pygame.K_r and game_over:
                reset_game()
                
# Adicionar gravidade ao pássaro bird_y += GRAVITY # Movimentar canos para a esquerda pipe_x -= BIRD_SPEED # Verificar se o pássaro colidiu com o cano if bird_x + BIRD_WIDTH > pipe_x and bird_x < pipe_x + PIPE_WIDTH: if bird_y < pipe_y or bird_y + BIRD_HEIGHT > pipe_y + PIPE_GAP: game_over = True # Verificar se o pássaro passou pelo cano if bird_x > pipe_x + PIPE_WIDTH and not game_over: score += 1 pipe_y = random.randint(100, HEIGHT - PIPE_GAP - 100) pipe_x = WIDTH # Desenhar fundo, canos e pássaro na tela screen.blit(background_image, (0, 0)) screen.blit(pipe_image, (pipe_x, pipe_y - PIPE_HEIGHT)) screen.blit(pygame.transform.rotate(pipe_image, 180), (pipe_x, pipe_y + PIPE_GAP)) screen.blit(bird_image, (bird_x, bird_y)) # Desenhar pontuação na tela score_text = score_font.render(str(score), True, (255, 255, 255)) screen.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, 50)) # Verificar se o pássaro atingiu o limite da tela if bird_y < 0 or bird_y + BIRD_HEIGHT > HEIGHT: game_over = True # Verificar se o jogo acabou if game_over: game_over_text = score_font.render('Game Over! Press R to Restart.', True, (255, 255, 255)) screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 2)) # Atualizar a tela pygame.display.update() # Limitar a taxa de atualização da tela pygame.time.Clock().tick(60)                

